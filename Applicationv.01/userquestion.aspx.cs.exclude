using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Collections;
using System.Configuration;
public partial class userquestion : System.Web.UI.Page
{
    List<int> QuestionList = new List<int>();
    private GTEEntities db = new GTEEntities();
    int UserID = 0, ApplicantID = 0;

    string webURL = System.Configuration.ConfigurationManager.AppSettings["WebUrl"].ToString();
    protected void Page_Load(object sender, EventArgs e)
    {
        if ((Session["Role"] == null) && (Session["UserID"] == null))
            Response.Redirect(webURL + "Login.aspx");
        UserID = Convert.ToInt32(Session["UserID"].ToString());
        ApplicantID = Convert.ToInt32(Session["Applicant"].ToString());
        Session["Question"] = null;
        if (!IsPostBack)
        {
            GetQuestion();
            List<int> list = (List<int>)Session["QList"];
            Binddatalist(0, list[0]);
            btnPrev.Enabled = false;
        }
        // ShowQuestions();
        // ShowQuestions();
    }




    //public List<T> Randomize<T>(List<T> list)
    //{
    //    List<T> randomizedList = new List<T>();
    //    Random rnd = new Random();
    //    while (list.Count > 0)
    //    {
    //        int index = rnd.Next(0, list.Count); //pick a random item from the master list
    //        randomizedList.Add(list[index]); //place it at the end of the randomized list
    //        list.RemoveAt(index);
    //    }
    //    return randomizedList;
    //}
    private void GetQuestion()
    {
        var QuestionsList = (from q in db.answermaster
                             join s in db.applicantscores on q.questionid equals s.questionID
                             where s.applicantID == ApplicantID
                             select new
                             {
                                 questionid = q.questionid,
                                 description = q.description
                             }).ToList().Distinct();

        foreach (var item in QuestionsList)
        {
            QuestionList.Add(item.questionid);
        }
        Session["QList"] = QuestionList;
    }
    private void Binddatalist(int page, int QuestionID)
    {
        var PrimaryQuestion = (question_master)Session["QuestionOrder"];

        // int primaryQuestionID = PrimaryQuestion[page].questionid;
        int srNo = page + 1;
        Session["srNo"] = srNo;
        var AnswerwithQuestion = (from q in db.question_master
                                  join a in db.answermaster on q.questionid equals a.questionid
                                  where q.questionid == QuestionID

                                  select new
                                  {
                                      srNo = srNo,
                                      questionid = q.questionid,
                                      answerid = a.answerid,
                                      answerdescription = a.answerdescription,
                                      description = q.description,
                                      Answer1 = "STRONLY AGREE",
                                      Answer2 = "AGREE",
                                      Answer3 = "NEITHER AGREE NOR DISAGREE",
                                      Answer4 = "DISAGREE",
                                      Answer5 = "STRONGLY DISAGREE",
                                  }).ToList();
        questionList.DataSource = AnswerwithQuestion;
        questionList.DataBind();
    }

    protected void btnsubmit_Click(object sender, EventArgs e)
    {
        Hashtable answer = new Hashtable();
        foreach (DataListItem item in questionList.Items)
        {

            int SelectedValue = 5;
            Label questionID = (Label)item.FindControl("lblno");
            Label lblquestion = (Label)item.FindControl("lblquestion");
            Label lblPrimary = (Label)item.FindControl("lblPrimary");
            //Label Label1 = e.Item.FindControl("lblPrimary") as Label;
            RadioButton rdStrongAgrre = (RadioButton)item.FindControl("rdoans1");
            RadioButton rdAgree = (RadioButton)item.FindControl("rdoans2");
            RadioButton rdNiether = (RadioButton)item.FindControl("rdoans3");
            RadioButton rdDisAgree = (RadioButton)item.FindControl("rdoans4");
            RadioButton rdStrongDisAgree = (RadioButton)item.FindControl("rdoans5");

            if (rdStrongAgrre.Checked)
            {
                SelectedValue = 2;
            }
            if (rdAgree.Checked)
            {
                SelectedValue = 1;
            }
            if (rdNiether.Checked)
            {
                SelectedValue = 0;
            }
            if (rdDisAgree.Checked)
            {
                SelectedValue = -1;
            }

            if (rdStrongDisAgree.Checked)
            {
                SelectedValue = -2;
            }
            if ((SelectedValue == 5) && (lblPrimary.Text != "1"))
            {
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "alertMessage", "alert('Please give answer of question " + lblquestion.Text + "')", true);
                //Response.Write("alert(Please give answer of question " + lblquestion.Text + "");
                break;
            }
            else
            {
                answer.Add(questionID.Text, SelectedValue);

            }
            if (questionList.Items.Count == answer.Count)
            {
                string messgae = Save(answer);
                List<int> list = (List<int>)Session["QList"];
                int PageNo = (int)Session["srNo"];
                PageNo = PageNo + 1;
                Session["Question"] = null;
                Binddatalist(PageNo, list[PageNo - 1]);
                Session["srNo"] = PageNo;
                if (PageNo == list.Count)
                {
                    btnsubmit.Enabled = false;
                    btnPrev.Enabled = true;
                }
                else if (PageNo == 1)
                {
                    btnsubmit.Enabled = true;
                    btnPrev.Enabled = false;
                }
                else
                {
                    btnsubmit.Enabled = true;
                    btnPrev.Enabled = true;
                }
                break;
                // ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "alertMessage", "alert('" + messgae + "')", true);
            }
        }
    }

    private string Save(Hashtable UserValues)
    {
        string message = string.Empty;
        ICollection key = UserValues.Keys;
        applicantscores objScore = new applicantscores();
        foreach (var val in key)
        {
            int PreviuosSavedValue = GetUserScore(ApplicantID, Convert.ToInt32(val));
            if (PreviuosSavedValue != 5)
            {
                objScore.applicantID = ApplicantID;
                objScore.answerId= Convert.ToInt32(val);
                objScore.answervalue = Convert.ToInt32(UserValues[val]);
                db.SaveChanges();
                message = "Thank you for particpating";
            }
        }
        return message;
    }

    protected void questionList_ItemDataBound(object sender, DataListItemEventArgs e)
    {
        Label Label1 = e.Item.FindControl("lblPrimary") as Label;

        Label LabelsrNo = e.Item.FindControl("lblSrNo") as Label;
        Panel pnl = (Panel)e.Item.FindControl("options");
        Label lblQuestionID = e.Item.FindControl("lblno") as Label;
        RadioButton rdStrongAgrre = (RadioButton)e.Item.FindControl("rdoans1");
        RadioButton rdAgree = (RadioButton)e.Item.FindControl("rdoans2");
        RadioButton rdNiether = (RadioButton)e.Item.FindControl("rdoans3");
        RadioButton rdDisAgree = (RadioButton)e.Item.FindControl("rdoans4");
        RadioButton rdStrongDisAgree = (RadioButton)e.Item.FindControl("rdoans5");
        int PreviuosSavedValue = GetUserScore(UserID, Convert.ToInt32(lblQuestionID.Text));
        switch (PreviuosSavedValue)
        {
            case 1:
                rdAgree.Checked = true;
                break;
            case 2:
                rdStrongAgrre.Checked = true;
                break;
            case 0:
                rdNiether.Checked = true;
                break;
            case -2:
                rdStrongDisAgree.Checked = true;
                break;
            case -1:
                rdDisAgree.Checked = true;
                break;
            default:
                break;
        }
        if (Session["Question"] == null)
        {
            Session["Question"] = Label1.Text;
            Label1.Text = Session["Question"].ToString();
            if (Session["srNo"] != null)
            {
                LabelsrNo.Text = Session["srNo"].ToString();
               // pnl.Visible = false;
            }
        }


        else
        {
          //  pnl.Visible = true;
            LabelsrNo.Text = "";
            Label1.Text = "";
        }
    }

    protected void btnPrev_Click(object sender, EventArgs e)
    {
        List<int> list = (List<int>)Session["QList"];
        int PageNo = (int)Session["srNo"];
        PageNo = PageNo - 1;
        Session["Question"] = null;
        Binddatalist(PageNo, list[PageNo - 1]);
        Session["srNo"] = PageNo;
        btnPrev.Enabled = false;
        if (PageNo == list.Count)
        {
            btnsubmit.Enabled = false;
            btnPrev.Enabled = true;
        }
        else if (PageNo == 1)
        {
            btnsubmit.Enabled = true;
            btnPrev.Enabled = false;
        }
        else
        {
            btnsubmit.Enabled = true;
            btnPrev.Enabled = true;
        }
    }

    protected int GetUserScore(int userID, int questionID)
    {
        int answervalue = 5;
        var answerbyQuestion = (from q in db.applicantscores.Where(q => q.applicantID == ApplicantID && q.questionID == questionID)

                                select new
                                {
                                    questionID = q.questionID,
                                    answerValue = q.answervalue
                                }).FirstOrDefault();
        if (answerbyQuestion != null)
            answervalue = (int)answerbyQuestion.answerValue;

        return answervalue;

    }
}